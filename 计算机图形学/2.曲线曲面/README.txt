功能说明：

程序环境 python3 + pyopengl + glfw + numpy + pandas

程序启动后：(参照演示视频)

1.按鼠标左键选中并移动控制点
	左键按下(未释放)时程序会获取相对于窗体的鼠标坐标，激活鼠标移动的回调函数，,将鼠标坐标转换为OpenGL绘图坐标后，检测10个像素内是否存在控制点，若存在，鼠标位置的回调函数将使控制点随着鼠标移动而移动，鼠标释放后，回调函数不再起坐拥。

2.按鼠标中键在边上添加控制点
	鼠标中键按下后，将依次取相邻的控制点连线和鼠标当前位置构成三角形，运用海伦公式计算三角形的面积并由此获得鼠标当前位置与对应连线的距离(三角形的高)，选择距离鼠标当前位置最近的连线，在连线两端端点的中间插入新的控制点。

3.按鼠标右键选中并删除控制点(控制点数量不满足约束条件时将不显示曲线)
	参照1，右键按下后将检测控制点，如果检测到则从点集中删去控制点(只删除最先被检测到的控制点)。

4.按 s 键保存点的位置信息(points.txt)(请确保您已关闭了输入法)
	按下 s 键，控制点的位置信息将以
	v x1 y1 z1
	v x2 y2 z2
	……
	的形式被保存在 points.txt 中。

5.按 r 键切换贝塞尔曲线和B样条曲线
	修改曲线样式，每一段 4 个控制点绘制的曲线由100个点连城折线而成，按下 r 键后所有曲线上的点将用另一种曲线的计算公式重新计算并绘制。

6.按 v 键生成并保存茶壶模型(teapot.obj)
	茶壶模型由 3 条贝塞尔曲线经过仿射变换构成，其中茶壶本体由曲线旋转而成，壶嘴和壶把由曲线顺着圆形轨迹平移而成，3 部分中的所有点构成 3 个矩阵，矩阵每一行对应 1 条贝塞尔曲线(假设有n个点)，将矩阵中相邻的可以构成最小矩形的四个点按照如下所示的方式构造成 2 个三角形即可。
	0	1		1	2
	n	(n+1)     变换	n+1	(n+2)
	
	构造三角形	1-2-(n+1)		2-(n+1)-(n+2)

7.按 f 键切换贝塞尔曲线控制点和B样条曲线控制点(只保留最前面的 4 个控制点)
按下 f 键后点集将使用矩阵变换公式，在保证曲线不变的前提下，转换为另一种曲线的控制点，公式如下，其中 I 表示对应矩阵的逆矩阵
        # 贝塞尔曲线
        np_bezier = np.mat([
            [-1, 3, -3, 1],
            [3, -6, 3, 0],
            [-3, 3, 0, 0],
            [1, 0, 0, 0]
        ])
        # B样条曲线
        np_spline = np.mat([
            [-1, 3, -3, 1],
            [3, -6, 3, 0],
            [-3, 0, 3, 0],
            [1, 4, 1, 0]
        ]) * 1 / 6
        # 贝塞尔曲线控制点转B样条曲线控制点
        points = np.array(np_spline.I*np_bezier*points).reshape((4, 2))
        # B样条曲线控制点转贝塞尔曲线控制点
        points = np.array(np_bezier.I*np_spline*points).reshape((4, 2))